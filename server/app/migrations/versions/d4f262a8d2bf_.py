"""empty message

Revision ID: d4f262a8d2bf
Revises: 18b7d0f5c9ff
Create Date: 2020-03-10 21:01:44.954651

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "d4f262a8d2bf"
down_revision = "18b7d0f5c9ff"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "set_translation",
        sa.Column(
            "uuid",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("set_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("locale", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["set_id"], ["set.uuid"], name=op.f("fk_set_translation_set_id_set")
        ),
        sa.PrimaryKeyConstraint("uuid", name=op.f("pk_set_translation")),
    )
    op.create_table(
        "item_translation",
        sa.Column(
            "uuid",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("item_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("locale", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["item_id"], ["item.uuid"], name=op.f("fk_item_translation_item_id_item")
        ),
        sa.PrimaryKeyConstraint("uuid", name=op.f("pk_item_translation")),
    )
    op.drop_index("ix_item_condition_item_id", table_name="item_condition")
    op.drop_table("item_condition")
    op.add_column("item", sa.Column("condtions", sa.JSON(), nullable=True))
    op.add_column("item", sa.Column("dofus_db_id", sa.String(), nullable=False))
    op.drop_column("item", "name")
    op.add_column("item_stat", sa.Column("alt_stat", sa.String(), nullable=True))
    op.add_column("set", sa.Column("dofus_db_id", sa.String(), nullable=False))
    op.drop_column("set", "name")
    op.add_column("set_bonus", sa.Column("alt_stat", sa.String(), nullable=True))
    op.add_column("set_bonus", sa.Column("value", sa.Integer(), nullable=True))
    op.alter_column(
        "set_bonus",
        "stat",
        existing_type=postgresql.ENUM(
            "VITALITY",
            "AP",
            "MP",
            "INITIATIVE",
            "PROSPECTING",
            "RANGE",
            "SUMMON",
            "WISDOM",
            "STRENGTH",
            "INTELLIGENCE",
            "CHANCE",
            "AGILITY",
            "AP_PARRY",
            "AP_REDUCTION",
            "MP_PARRY",
            "MP_REDUCTION",
            "CRITICAL",
            "HEALS",
            "LOCK",
            "DODGE",
            "PCT_FINAL_DAMAGE",
            "POWER",
            "DAMAGE",
            "CRITICAL_DAMAGE",
            "NEUTRAL_DAMAGE",
            "EARTH_DAMAGE",
            "FIRE_DAMAGE",
            "WATER_DAMAGE",
            "AIR_DAMAGE",
            "REFLECT",
            "TRAP_DAMAGE",
            "TRAP_POWER",
            "PUSHBACK_DAMAGE",
            "PCT_SPELL_DAMAGE",
            "PCT_WEAPON_DAMAGE",
            "PCT_RANGED_DAMAGE",
            "PCT_MELEE_DAMAGE",
            "NEUTRAL_RES",
            "PCT_NEUTRAL_RES",
            "EARTH_RES",
            "PCT_EARTH_RES",
            "FIRE_RES",
            "PCT_FIRE_RES",
            "WATER_RES",
            "PCT_WATER_RES",
            "AIR_RES",
            "PCT_AIR_RES",
            "CRITICAL_RES",
            "PUSHBACK_RES",
            "PCT_RANGED_RES",
            "PCT_MELEE_RES",
            "PODS",
            name="stat",
        ),
        nullable=True,
    )
    op.drop_column("set_bonus", "max_value")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "set_bonus",
        sa.Column("max_value", sa.INTEGER(), autoincrement=False, nullable=False),
    )
    op.alter_column(
        "set_bonus",
        "stat",
        existing_type=postgresql.ENUM(
            "VITALITY",
            "AP",
            "MP",
            "INITIATIVE",
            "PROSPECTING",
            "RANGE",
            "SUMMON",
            "WISDOM",
            "STRENGTH",
            "INTELLIGENCE",
            "CHANCE",
            "AGILITY",
            "AP_PARRY",
            "AP_REDUCTION",
            "MP_PARRY",
            "MP_REDUCTION",
            "CRITICAL",
            "HEALS",
            "LOCK",
            "DODGE",
            "PCT_FINAL_DAMAGE",
            "POWER",
            "DAMAGE",
            "CRITICAL_DAMAGE",
            "NEUTRAL_DAMAGE",
            "EARTH_DAMAGE",
            "FIRE_DAMAGE",
            "WATER_DAMAGE",
            "AIR_DAMAGE",
            "REFLECT",
            "TRAP_DAMAGE",
            "TRAP_POWER",
            "PUSHBACK_DAMAGE",
            "PCT_SPELL_DAMAGE",
            "PCT_WEAPON_DAMAGE",
            "PCT_RANGED_DAMAGE",
            "PCT_MELEE_DAMAGE",
            "NEUTRAL_RES",
            "PCT_NEUTRAL_RES",
            "EARTH_RES",
            "PCT_EARTH_RES",
            "FIRE_RES",
            "PCT_FIRE_RES",
            "WATER_RES",
            "PCT_WATER_RES",
            "AIR_RES",
            "PCT_AIR_RES",
            "CRITICAL_RES",
            "PUSHBACK_RES",
            "PCT_RANGED_RES",
            "PCT_MELEE_RES",
            "PODS",
            name="stat",
        ),
        nullable=False,
    )
    op.drop_column("set_bonus", "value")
    op.drop_column("set_bonus", "alt_stat")
    op.add_column(
        "set", sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False)
    )
    op.drop_column("set", "dofus_db_id")
    op.drop_column("item_stat", "alt_stat")
    op.add_column(
        "item", sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False)
    )
    op.drop_column("item", "dofus_db_id")
    op.drop_column("item", "condtions")
    op.create_table(
        "item_condition",
        sa.Column(
            "uuid",
            postgresql.UUID(),
            server_default=sa.text("uuid_generate_v4()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("item_id", postgresql.UUID(), autoincrement=False, nullable=True),
        sa.Column("limit", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("custom_condition", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("is_set_bonus", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column(
            "stat",
            postgresql.ENUM(
                "VITALITY",
                "AP",
                "MP",
                "INITIATIVE",
                "PROSPECTING",
                "RANGE",
                "SUMMON",
                "WISDOM",
                "STRENGTH",
                "INTELLIGENCE",
                "CHANCE",
                "AGILITY",
                "AP_PARRY",
                "AP_REDUCTION",
                "MP_PARRY",
                "MP_REDUCTION",
                "CRITICAL",
                "HEALS",
                "LOCK",
                "DODGE",
                "PCT_FINAL_DAMAGE",
                "POWER",
                "DAMAGE",
                "CRITICAL_DAMAGE",
                "NEUTRAL_DAMAGE",
                "EARTH_DAMAGE",
                "FIRE_DAMAGE",
                "WATER_DAMAGE",
                "AIR_DAMAGE",
                "REFLECT",
                "TRAP_DAMAGE",
                "TRAP_POWER",
                "PUSHBACK_DAMAGE",
                "PCT_SPELL_DAMAGE",
                "PCT_WEAPON_DAMAGE",
                "PCT_RANGED_DAMAGE",
                "PCT_MELEE_DAMAGE",
                "NEUTRAL_RES",
                "PCT_NEUTRAL_RES",
                "EARTH_RES",
                "PCT_EARTH_RES",
                "FIRE_RES",
                "PCT_FIRE_RES",
                "WATER_RES",
                "PCT_WATER_RES",
                "AIR_RES",
                "PCT_AIR_RES",
                "CRITICAL_RES",
                "PUSHBACK_RES",
                "PCT_RANGED_RES",
                "PCT_MELEE_RES",
                "PODS",
                name="stat",
            ),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "stat_greater_than", sa.BOOLEAN(), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["item_id"], ["item.uuid"], name="fk_item_conditions_item_id_item"
        ),
        sa.PrimaryKeyConstraint("uuid", name="pk_item_conditions"),
    )
    op.create_index(
        "ix_item_condition_item_id", "item_condition", ["item_id"], unique=False
    )
    op.drop_table("item_translation")
    op.drop_table("set_translation")
    # ### end Alembic commands ###
