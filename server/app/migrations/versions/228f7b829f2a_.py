"""empty message

Revision ID: 228f7b829f2a
Revises: 2e5815c5369a
Create Date: 2020-04-14 00:03:15.529903

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from app import db
from app.database.model_item_slot import ModelItemSlot
from app.database.model_item_slot_translation import ModelItemSlotTranslation
from app.database.model_item_type import ModelItemType
from app.database.model_item_type_translation import ModelItemTypeTranslation
import os
import json

dirname = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


# revision identifiers, used by Alembic.
revision = "228f7b829f2a"
down_revision = "2e5815c5369a"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "item_type_translation",
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("item_type_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("locale", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["item_type_id"],
            ["item_type.uuid"],
            name=op.f("fk_item_type_translation_item_type_id_item_type"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_item_type_translation")),
        sa.UniqueConstraint("id", name=op.f("uq_item_type_translation_id")),
    )

    with open(os.path.join(dirname, "database/data/item_types.json"), "r") as file:
        data = json.load(file)
        for record in data:
            type_query = db.session.query(ModelItemType).filter_by(name=record["en"])
            for locale in record:
                translation = ModelItemTypeTranslation(
                    item_type_id=type_query.uuid, locale=locale, name=record[locale]
                )
                db.session.add(translation)
                type_query.item_type_translation.append(translation)

        db.session.commit()

    op.create_table(
        "item_slot_translation",
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("item_slot_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("locale", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["item_slot_id"],
            ["item_slot.uuid"],
            name=op.f("fk_item_slot_translation_item_slot_id_item_slot"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_item_slot_translation")),
        sa.UniqueConstraint("id", name=op.f("uq_item_slot_translation_id")),
    )

    with open(os.path.join(dirname, "database/data/item_slots.json"), "r") as file:
        data = json.load(file)
        i = 0
        for record in data:
            for _ in range(record.get("quantity", 1)):
                slot_query = db.session.query(ModelItemSlot).filter_by(
                    name=record["name"]["en"], order=i
                )
                for locale in record["name"]:
                    translation = ModelItemSlotTranslation(
                        item_slot_id=slot_query.uuid,
                        locale=locale,
                        name=record["name"][locale],
                    )
                    db.session.add(translation)
                    slot_query.item_slot_translation.append(translation)
                i = i + 1
        db.session.commit()

    op.drop_column("item_slot", "name")
    op.drop_column("item_type", "name")
    op.create_index(
        op.f("ix_user_account_email"), "user_account", ["email"], unique=True
    )
    op.create_index(
        op.f("ix_user_account_username"), "user_account", ["username"], unique=True
    )
    op.create_index(
        op.f("ix_user_account_verified"), "user_account", ["verified"], unique=False
    )
    op.drop_index("ix_user_email", table_name="user_account")
    op.drop_index("ix_user_username", table_name="user_account")
    op.drop_index("ix_user_verified", table_name="user_account")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index("ix_user_verified", "user_account", ["verified"], unique=False)
    op.create_index("ix_user_username", "user_account", ["username"], unique=True)
    op.create_index("ix_user_email", "user_account", ["email"], unique=True)
    op.drop_index(op.f("ix_user_account_verified"), table_name="user_account")
    op.drop_index(op.f("ix_user_account_username"), table_name="user_account")
    op.drop_index(op.f("ix_user_account_email"), table_name="user_account")
    op.add_column(
        "item_type",
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=True),
    )

    all_types = db.session.query(ModelItemType).all()
    for type in all_types:
        en_translation = db.session.query(ModelItemTypeTranslation).filter_by(
            locale="en", item_type_id=type.uuid
        )
        type.name = en_translation.name

    db.session.commit()

    op.alter_column("item_type", "name", nullable=False)

    op.add_column(
        "item_type",
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=Truw),
    )

    all_slots = db.session.query(ModelItemSlot).all()
    for slot in all_slots:
        en_translation = db.session.query(ModelItemSlotTranslation).filter_by(
            locale="en", item_slot_id=slot.uuid
        )
        slot.name = en_translation.name

    db.session.commit()

    op.alter_column("item_slot", "name", nullable=False)

    op.drop_table("item_type_translation")
    op.drop_table("item_slot_translation")
    # ### end Alembic commands ###
